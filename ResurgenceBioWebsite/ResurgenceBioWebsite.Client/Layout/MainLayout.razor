@inherits LayoutComponentBase

@using Microsoft.FluentUI.AspNetCore.Components

@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

@inject MainLayoutService MainLayoutService

@* todo: implement `prefers-color-scheme` setting and theme selector. use javascript (blazor cannot access the DOM) (https://tailwindcss.com/docs/dark-mode#supporting-system-preference-and-manual-selection). can it be done in the main layout? *@

@* todo: implement a global style with tailwind (pass container, for example) *@

<div class="@_interactivityScreenHeight min-h-screen w-full relative flex flex-col items-center justify-start touch-manipulation">

    @* todo: allow classes to be passed to components and applied to their top-level element *@
    <header class="@_headerHeight fixed z-40 w-full flex flex-col">
        <div class="top-0 z-50">
            <NavBar/>
        </div>
        <div class="@_mobileNavigationMenuContainerVisibility flex-1 overflow-y-auto overflow-x-hidden overscroll-none custom-scrollbar-hide">
            <MobileNavMenu/>
        </div>
    </header>

    @* todo: explore using the division and opacity mask to limit scrolling on the main content without adjusting the main content *@
    <div class="@_interactivityDivisionAndOpacityVisibility fixed z-20 h-full w-full overflow-hidden bg-black bg-opacity-70"></div>

    <div class="flex-1 w-full flex flex-col items-center relative max-md:mt-[52px] md:max-lg:mt-[60px] lg:mt-[80px] box-border">
        <div class="container box-border px-4 flex-1 flex flex-col items-center justify-between">
            <main id="@PageBodyId" @ref="_pageBodyElement" tabindex="-1" class=" flex-1 lg:max-w-screen-lg w-full h-full flex flex-col items-center justify-center text-white max-lg:pt-6 lg:pt-10">
                @Body
            </main>

            <Footer></Footer>
        </div>
    </div>
</div>

<style>
    .custom-scrollbar-hide::-webkit-scrollbar {
        display: none;
    }
    .custom-scrollbar-hide {
        -ms-overflow-style: none;  /* Internet Explorer 10+ */
        scrollbar-width: none;  /* Firefox */
    }
</style>

@* <FluentToastProvider/> *@
@* <FluentDialogProvider/> *@
@* <FluentTooltipProvider/> *@
@* <FluentMessageBarProvider/> *@


@* <div id="blazor-error-ui" data-nosnippet> *@
@*     An unhandled error has occurred. *@
@*     <a href="." class="reload">Reload</a> *@
@*     <span class="dismiss">🗙</span> *@
@* </div> *@

@code
{
    // todo: implement regular and full footer
    private bool IsHomePage => Navigation.Uri == Navigation.BaseUri;

    // todo: implement tailwind prose styling

    // note: interactivity toggle
    private const string PageBodyId = "pageBody";
    private ElementReference _pageBodyElement = new ElementReference(PageBodyId);

    private string _interactivityScreenHeight = "";
    private string _interactivityDivisionAndOpacityVisibility = "hidden";
    private string _mobileNavigationMenuContainerVisibility = "hidden";
    private string _headerHeight = "";

    public async void TogglePageInteractivity(bool value)
    {
        if (value)
        {
            _interactivityScreenHeight = "max-h-screen";
            _interactivityDivisionAndOpacityVisibility = "";
            _mobileNavigationMenuContainerVisibility = "";
            _headerHeight = "h-[80%]";

            await JsRuntime.InvokeVoidAsync("document.body.classList.add", "overflow-hidden");

            StateHasChanged();
        }
        else
        {
            _interactivityScreenHeight = "";
            _interactivityDivisionAndOpacityVisibility = "hidden";
            _mobileNavigationMenuContainerVisibility = "hidden";
            _headerHeight = "";

            await JsRuntime.InvokeVoidAsync("document.body.classList.remove", "overflow-hidden");

            StateHasChanged();
        }
    }

    // note: overridden methods
    private MainLayout? _mainLayout;

    // protected override void OnInitialized()
    // {
    //     Navigation.LocationChanged += OnLocationChanged;
    // }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;

        _mainLayout = this;
        MainLayoutService.SetMainLayout(_mainLayout);
    }

    // public void Dispose()
    // {
    //     Navigation.LocationChanged -= OnLocationChanged;
    // }
    //
    // private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    // {
    //     await JsRuntime.InvokeVoidAsync("scrollToTop");
    // }
}